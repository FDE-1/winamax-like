services:
  match-service:
    build:
      context: ./match-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=winamax
      - POSTGRES_PASSWORD=your_password
      - POSTGRES_PORT=5432
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - app-network

  # test-match:
  #   build:
  #     context: ./match-service
  #   command: ["npm", "test", "--", "--detectOpenHandles", "--forceExit"]
  #   environment:
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_DB=winamax
  #     - POSTGRES_PASSWORD=your_password
  #     - POSTGRES_PORT=5432
  #     - REDIS_HOST=redis
  #     - KAFKA_BROKERS=kafka:29092
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_started
  #     match-service:
  #       condition: service_started
  #   networks:
  #     - app-network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=winamax
      - POSTGRES_PASSWORD=your_password
      - POSTGRES_PORT=5432
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=your_password
      - POSTGRES_DB=winamax
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network
  # test-user:
  #   build:
  #     context: ./user-service
  #   command: ["npm", "test", "--", "--detectOpenHandles", "--forceExit"]
  #   environment:
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_DB=winamax
  #     - POSTGRES_PASSWORD=your_password
  #     - POSTGRES_PORT=5432
  #   depends_on:
  #     - postgres
  #     - redis
  #   networks:
  #     - app-network

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network


  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - app-network

  gamification-service:
    build:
      context: ./gamification-service
    command: ["npm", "start"]
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=winamax
      - POSTGRES_PASSWORD=your_password
      - POSTGRES_PORT=5432
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
      user-service:
        condition: service_started
    networks:
      - app-network

  # test-gamification:
  #   build:
  #     context: ./gamification-service
  #   command: ["npm", "test", "--", "--runInBand", "--forceExit"]
  #   environment:
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_DB=winamax
  #     - POSTGRES_PASSWORD=your_password
  #   depends_on:
  #     - gamification-service
  #     - test-user
  #   networks:
  #     - app-network

  notification-service:
    build:
      context: ./notification-service
    command: ["npm", "start"]
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=winamax
      - POSTGRES_PASSWORD=your_password
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
    networks:
      - app-network

  # test-notification:
  #   build:
  #     context: ./notification-service
  #   command: ["npm", "test", "--", "--runInBand", "--forceExit"]
  #   environment:
  #     - NOTIFICATION_SERVICE_URL=http://notification-service:3003
  #     - KAFKA_BROKERS=kafka:29092
  #   depends_on:
  #     - notification-service
  #     - test-gamification
  #   networks:
  #     - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
